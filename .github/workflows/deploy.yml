name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      
      - name: Fetch SSH key from AWS Secrets Manager
        id: fetch_key
        run: |
          echo "::add-mask::***"
          echo "::add-mask::-----BEGIN"
          echo "::add-mask::-----END"
          set +x
          chmod +x scripts/fetch-secrets.sh
          SSH_KEY=$(./scripts/fetch-secrets.sh)
          echo "::add-mask::$SSH_KEY"
          echo "::add-mask::$(echo "$SSH_KEY" | tr -d '\n')"
          echo "::add-mask::$(echo "$SSH_KEY" | head -c 50)***"
          echo "::add-mask::***$(echo "$SSH_KEY" | tail -c 50)"
          SSH_KEY_FORMATTED=$(echo "$SSH_KEY" | sed 's/\\n/\n/g')
          TEMP_KEY_FILE=$(mktemp)
          echo "$SSH_KEY_FORMATTED" > "$TEMP_KEY_FILE"
          chmod 600 "$TEMP_KEY_FILE"
          if ! ssh-keygen -l -f "$TEMP_KEY_FILE" >/dev/null 2>&1; then
            echo "ERROR: Invalid SSH key format retrieved from AWS"
            rm -f "$TEMP_KEY_FILE"
            exit 1
          fi
          rm -f "$TEMP_KEY_FILE"
          {
            echo "ssh_key_value<<SSH_KEY_EOF"
            echo "$SSH_KEY_FORMATTED"
            echo "SSH_KEY_EOF"
          } >> $GITHUB_OUTPUT
          unset SSH_KEY SSH_KEY_FORMATTED


      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate trunk-based tag
        id: trunk_based_tag
        run: echo "tag=$(date +'%Y%m%d%H%M%S')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fuse-agent:${{ steps.trunk_based_tag.outputs.tag }}

      - name: Setup SSH with webfactory/ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ steps.fetch_key.outputs.ssh_key_value }}

      - name: Deploy to EC2
        run: |
          DEPLOY_SCRIPT=$(mktemp /tmp/deploy.XXXXXX)
          chmod 700 "$DEPLOY_SCRIPT"
          
          # Write deployment commands to script
          cat > "$DEPLOY_SCRIPT" << 'SCRIPT_EOF'
          #!/bin/bash
          set -xeuo pipefail
          
          umask 077
          
          mkdir -p /home/ec2-user/fuse-agent
          cd /home/ec2-user/fuse-agent
          
          # Copy docker-compose.prod.yml from repository to remote server
          scp -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o LogLevel=ERROR \
              -o ConnectTimeout=30 \
              -P 4022 \
              docker-compose.prod.yml \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/ec2-user/fuse-agent/

          cat > .env << ENV_EOF
          DOCKER_IMAGE_TAG=$1
          DOCKERHUB_USERNAME=$2
          LINEAR_CLIENT_ID=$3
          LINEAR_CLIENT_SECRET=$4
          LINEAR_WEBHOOK_SECRET=$5
          OPENAI_API_KEY=$6
          WORKER_URL=$7
          ENV_EOF
          
          chmod 600 .env
          chmod 644 docker-compose.prod.yml
          
          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d
          
          rm -f .env
          
          echo "Deployment completed successfully"
          SCRIPT_EOF
          
          ssh -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o LogLevel=ERROR \
              -o ConnectTimeout=30 \
              -o ServerAliveInterval=60 \
              -p 4022 \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
              'bash -s' < "$DEPLOY_SCRIPT" \
              "${{ steps.trunk_based_tag.outputs.tag }}" \
              "${{ secrets.DOCKERHUB_USERNAME }}" \
              "${{ secrets.LINEAR_CLIENT_ID }}" \
              "${{ secrets.LINEAR_CLIENT_SECRET }}" \
              "${{ secrets.LINEAR_WEBHOOK_SECRET }}" \
              "${{ secrets.OPENAI_API_KEY }}" \
              "${{ secrets.WORKER_URL }}"
          
          rm -f "$DEPLOY_SCRIPT"
          
          echo "Remote deployment script executed successfully"

      - name: Cleanup SSH key
        if: always()
        run: |
          # Remove SSH key from agent
          if pgrep ssh-agent > /dev/null; then
            ssh-add -D 2>/dev/null || true
            pkill ssh-agent 2>/dev/null || true
          fi
          
          # Remove temporary SSH key file
          if [ -n "${{ steps.fetch_key.outputs.ssh_key_file }}" ] && [ -f "${{ steps.fetch_key.outputs.ssh_key_file }}" ]; then
            shred -vfz -n 3 "${{ steps.fetch_key.outputs.ssh_key_file }}" 2>/dev/null || \
            rm -f "${{ steps.fetch_key.outputs.ssh_key_file }}"
            echo "SSH key file securely removed"
          fi
          
          # Clear any temporary files
          find /tmp -name "ssh_key.*" -user "$(whoami)" -delete 2>/dev/null || true
          find /tmp -name "deploy.*" -user "$(whoami)" -delete 2>/dev/null || true